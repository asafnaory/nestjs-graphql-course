
scalar Date 

interface Athlete {
    name: String!
}

enum Position {
    POINT_GUARD
    SHOOTING_GUARD
    SMALL_FORWARD
    POWER_FORWARD
    CENTER
}

union AthleteResult = Player | Runner

"""
Players Model
"""
type Runner implements Athlete {
    id: ID!
    name: String!
    createdAt: Date
}

type Player implements Athlete {
    id: ID!
    number: Int!
    name: String!
    nickNames: [String!]
    team: Team!
    createdAt: Date
    position: Position
}

type Team {
    id: ID!
    name: String!
    city: String!
    players: [Player!]
}

type Query {
    players: [Player!]!
    player(id: ID!): Player
    athletes: [AthleteResult!]!
    teams: [Team!]!
    team(id: ID!): Team
}

type Mutation {
    createPlayer(createPlayerInput: CreatePlayerInput): Player
    updatePlayer(id: ID!, updatePlayerInput: UpdatePlayerInput): Player
    deletePlayer(id: ID!): Player
}

input TeamInput {
    name: String!
    city: String!
}

input CreatePlayerInput {
    number: Int!
    name: String!
    nickNames: [String!]
    team: TeamInput!
    position: Position
}

input UpdatePlayerInput {
    number: Int
    name: String
    nickNames: [String!]
    team: TeamInput
    position: Position
}